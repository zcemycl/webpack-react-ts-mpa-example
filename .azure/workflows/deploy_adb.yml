trigger:
- main

resources:
- repo: self

name: Deploy Bicep files

parameters:
  - name: authorization.parameters.loginServer
    displayName: 'login server: {}.azurecr.io'
    type: string
    default: '$(ACRNAME).azurecr.io'
  
  - name: authorization.parameters.scope
    displayName: 'scope: /subscriptions/{spid}/resourceGroups/{rg}/providers/Microsoft.ContainerRegistry/registries/{acrname}'
    type: string
    default: '/subscriptions/$(SUBSCRIPTIONID)/resourceGroups/$(RG)/providers/Microsoft.ContainerRegistry/registries/$(ACRNAME)'

  - name: authorization.parameters.tenantId
    displayName: 'tenant id: find it in az ad sp'
    type: string
    default: $(TID)

  - name: data.registryId
    displayName: 'registry id: same as authorization parameters scope'
    type: string
    default: '/subscriptions/$(SUBSCRIPTIONID)/resourceGroups/$(RG)/providers/Microsoft.ContainerRegistry/registries/$(ACRNAME)'

  - name: name
    displayName: name of your service connection
    type: string
    default: 'what-is-your-name'

  - name: data.subscriptionId
    displayName: subscription id
    type: string
    default: $(SUBSCRIPTIONID)

  - name: data.subscriptionName
    displayName: subscription name
    type: string
    default: 'Pay-As-You-Go'

variables:
  azureServiceConnection: 'leo-test-service-conn'
  dockerRegistryServiceConnection: 'leo-docker'

  vmImageName: 'ubuntu-latest'
  resourceGroupName: $(RG)
  location: 'eastus'
  templateFile: './infrastructure/bicep/main.bicep'
  acrName: $(ACRNAME)
  
  imageRepository: 'leotest'
  containerRegistry: '$(ACRNAME).azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  webAppName: acrleoapp9779

  org: $(ORG)
  project: $(PROJECT)

pool:
  vmImage: $(vmImageName)

steps:
- script: |
    az devops service-endpoint azurerm create --azure-rm-service-principal-id $(SPID) --azure-rm-subscription-id $(SI) --azure-rm-subscription-name $(SN) --azure-rm-tenant-id $(TID) --name leo-cli-rm --org $(ORG) --p $(PROJECT)
  displayName: Create service connection
  env:
    AZURE_DEVOPS_EXT_AZURE_RM_SERVICE_PRINCIPAL_KEY: $(SPKEY)
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    
- task: AzureResourceManagerTemplateDeployment@3
  displayName: Deploy container registry
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '$(azureServiceConnection)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(resourceGroupName)'
    location: '$(location)'
    templateLocation: 'Linked artifact'
    csmFile: '$(templateFile)'
    overrideParameters: '-acrName $(acrName) -acrNewOrExisting new'
    deploymentMode: 'Incremental'
    deploymentName: 'DeployPipelineTemplate'

- ${{ each item in parameters }}:
  - bash: |
      echo "##vso[task.setvariable variable=${{ item.key }}]${{ item.value }}"
    displayName: "Create Variable ${{ item.key }}"
    
- task: FileTransform@2
  displayName: "Transform Json"
  inputs:
    folderPath: '$(System.DefaultWorkingDirectory)/infrastructure/adb/'
    xmlTransformationRules: ''
    jsonTargetFiles: 'acr_service_conn.json'
  
- bash: |
    cat $(System.DefaultWorkingDirectory)/infrastructure/adb/acr_service_conn.json
  displayName: "Show Json substitution"

- script: |
    az devops service-endpoint create --service-endpoint-configuration $(System.DefaultWorkingDirectory)/infrastructure/adb/acr_service_conn.json --org $(org) -p $(project)
    sleep 60
    az devops service-endpoint list --org $(org) -p $(project)
    epId=`az devops service-endpoint list  --org $(org) -p $(project) --query "[?name=='${{ parameters.name }}'].id" -o tsv` && echo $epId
    az devops service-endpoint update --id $epId --enable-for-all true --org $(org) -p $(project)
  displayName: Create service connection for docker
  env:
    AZURE_DEVOPS_EXT_AZURE_RM_SERVICE_PRINCIPAL_KEY: $(SPKEY)
    AZURE_DEVOPS_EXT_PAT: $(PAT)

- task: Docker@2
  displayName: Build and push an image to container registry
  inputs:
    command: buildAndPush
    repository: $(imageRepository)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)
      latest

- task: AzureResourceManagerTemplateDeployment@3
  displayName: Deploy app service
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '$(azureServiceConnection)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(resourceGroupName)'
    location: '$(location)'
    templateLocation: 'Linked artifact'
    csmFile: '$(templateFile)'
    overrideParameters: '-webAppName $(webAppName) -apsNewOrExisting new -dockerRegistryHost $(acrName).azurecr.io -dockerImage $(imageRepository):latest'
    deploymentMode: 'Incremental'
    deploymentName: 'DeployPipelineTemplate'