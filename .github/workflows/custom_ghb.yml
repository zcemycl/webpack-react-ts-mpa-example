on:
  workflow_dispatch:
    inputs:
      workflowName:
        description: 'Workflow Name: '
        required: true
        type: string
        default: 'e2e deployment'

      createdBy: 
        description: 'Created By: '
        required: true
        type: string
        default: 'Leo-Leung'
      
      location:
        description: 'Location: '
        required: true
        type: string
        default: 'eastus'
      
      projectName:
        description: 'Project Name: '
        required: true
        type: string
        default: 'Learn-Azure'

      acrName:
        description: 'Azure Container Registry Name: '
        required: true
        type: string
        default: 'acrleotest9789'

      webAppName:
        description: 'Azure App Service Name: '
        required: true
        type: string
        default: 'acrleoapp9779'

      dockerImage:
        description: 'Docker Image Name'
        required: true
        type: string
        default: 'bicep-app-service-container:latest'

      acrNewOrExisting:
        description: 'Deploy new azure container registry or not'
        required: true
        type: options
        options: ['new', 'existing']
        default: 'existing'

      apsNewOrExisting:
        description: 'Deploy new azure app service or not'
        required: true
        type: options
        options: ['new', 'existing']
        default: 'existing'

name: Deploy Bicep Scripts Selectively

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: deploy acr
        id: deploy-acr
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./infrastructure/bicep/main.bicep
          failOnStdErr: false
          parameters: acrNewOrExisting=${{ github.event.inputs.acrNewOrExisting }}
            acrName=${{ github.event.inputs.acrName }}
            createdBy="${{ github.event.inputs.createdBy }}"
            location=${{ github.event.inputs.location }}
            projectName="${{ github.event.inputs.projectName }}"

      - name: login acr
        id: acr-login
        uses: azure/CLI@v1
        with:
          azcliversion: 2.39.0
          inlineScript: |
            LOGIN=$(az acr login --name ${{ github.event.inputs.acrName }} --expose-token)
            ACR_ACCESS_TOKEN=$(echo $LOGIN | jq -r '.accessToken')
            ACR_LOGIN_SERVER=$(echo $LOGIN | jq -r '.loginServer')
            echo "::add-mask::$ACR_ACCESS_TOKEN"
            echo "::set-output name=ACR_ACCESS_TOKEN::$ACR_ACCESS_TOKEN"
            echo "::set-output name=ACR_LOGIN_SERVER::$ACR_LOGIN_SERVER"

      - name: Docker Login
        run: |
          docker login ${{ steps.acr-login.outputs.ACR_LOGIN_SERVER }} --username 00000000-0000-0000-0000-000000000000 --password ${{ steps.acr-login.outputs.ACR_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.acr-login.outputs.ACR_LOGIN_SERVER }}/${{ github.event.inputs.dockerImage }}

      - name: deploy app service
        id: deploy-app-service
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./infrastructure/bicep/main.bicep
          failOnStdErr: false
          parameters: apsNewOrExisting=${{ github.event.inputs.apsNewOrExisting }}
            webAppName=${{ github.event.inputs.webAppName }}
            createdBy="${{ github.event.inputs.createdBy }}"
            location=${{ github.event.inputs.location }}
            projectName="${{ github.event.inputs.projectName }}"
            dockerRegistryHost=${{ steps.acr-login.outputs.ACR_LOGIN_SERVER }} 
            dockerImage=${{ github.event.inputs.dockerImage }}

